#!/usr/bin/env python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

#          (c) Copyright 2012 Hewlett-Packard Development Company, L.P.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

"""
  CLI interface for healthnmon management.
"""
import errno
import gettext
import optparse
import os
import sys
import getpass
# If ../healthnmon/__init__.py exists, add ../ to Python search path, so that
# it will override what happens to be installed in /usr/(local/)lib/python...
POSSIBLE_TOPDIR = os.path.normpath(os.path.join(os.path.abspath(sys.argv[0]),
                                   os.pardir,
                                   os.pardir))
if os.path.exists(os.path.join(POSSIBLE_TOPDIR, 'healthnmon', '__init__.py')):
    sys.path.insert(0, POSSIBLE_TOPDIR)

gettext.install('healthnmon', unicode=1)

from nova import context
from nova import crypto
from healthnmon import db
from nova import exception
from nova import config
from healthnmon import log as logging
from nova import utils
from nova import version
from healthnmon.db import migration
from nova.db import api as db_api
from healthnmon.common import ssh_configuration
from nova.openstack.common import cfg, rpc

api_opts = [
    cfg.StrOpt('healthnmon_topic',
               default='healthnmon',
               help='the topic healthnmon service listen on')
]

CONF = cfg.CONF
CONF.register_opts(api_opts)


# Decorators for actions
def args(*args, **kwargs):
    def _decorator(func):
        func.__dict__.setdefault('options', []).insert(0, (args, kwargs))
        return func
    return _decorator


class DbCommands(object):
    """Class for managing the database."""

    def __init__(self):
        pass

    @args('--version', dest='version', metavar='<version>',
          help='Database version')
    def sync(self, version=None):
        """Sync the database up to the most recent version."""
        return migration.db_sync(version)

    def version(self):
        """Print the current database version."""
        print migration.db_version()


class SSHCommands(object):
    """Class for setting up SSH connection between host and appliance"""

    def configure(self, hostname, user):
        """Set up SSH key pair between the appliance and host"""
        service_records = db_api.service_get_all_by_host(
            context.get_admin_context(), hostname)
        if len(service_records) == 0:
            print _("Unable to find the host '%s' in the list of \
            compute nodes. For a list of known compute nodes try \
            'nova-manage service list'" % (hostname))
            return

        remoteuser = str(user) + "@" + str(hostname)
        password = getpass.getpass("Enter password for %s: " % remoteuser)
        ssh_configuration.configure_host(hostname, user, password)


class ProfileCommands(object):
    """Class for managing the profiling ."""

    def __init__(self):
        pass

    @args('--state', dest='state', metavar='<state>',
          help='Whether to enable/disable CPU profile')
    @args('--module', dest='module', metavar='<module>',
          help='module name for which CPU profiler decorator is applied')
    @args('--decorator', dest='decorator', metavar='<decorator>',
          help='CPU profiler decorator name')
    def cputime(self,
                state,
                module,
                decorator='healthnmon.profiler.\
                profile_cpu.profile_cputime_decorator'):
        """enables/disables decorator to profile CPU in healthnmon """
        if module is None:
            print _("Specify module name for profiling cpu time")

        status = None
        if state == 'disable':
            status = False
        elif state == 'enable':
            status = True
        else:
            print _("Wrong arguments supplied. \
            Possible arguments are enable/disable")
            return

        result = rpc.call(context.get_admin_context(),
                          CONF.healthnmon_topic,
                          {"method": "profile_cputime",
                           "args": {"module": module,
                                    "decorator": decorator,
                                    "status": status}})

    @args('--state', dest='state', metavar='<state>',
          help='Whether to enable/disable memory profile')
    @args('--method', dest='method', metavar='<method>',
          help='method name for which memory profiler \
          decorator need to be applied')
    @args('--setref', dest='setref', action="store_true", default=False,
          help='Whether to Set reference for enabling \
          relative memory profling')
    @args('--decorator', dest='decorator', metavar='<decorator>',
          help='memory profiler decorator name')
    def memory(self, state, method,
               decorator='healthnmon.profiler.profile_mem.\
               profile_memory_decorator', setref=False):
        """enables/disables decorator to profile memory in healthnmon """
        if method is None:
            print _("Specify method name for profiling memory")

        status = None
        if state == 'disable':
            status = False
        elif state == 'enable':
            status = True
        else:
            print _("Wrong arguments supplied. Possible \
            arguments are enable/disable")
            return

        result = rpc.call(context.get_admin_context(),
                          CONF.healthnmon_topic,
                          {"method": "profile_memory",
                           "args": {"method": method,
                                    "decorator": decorator,
                                    "status": status,
                                    "setref": setref}})


class LogCommands(object):
    """Class for managing the healthnmon logger."""

    def __init__(self):
        pass

    @args('--level', dest='level', metavar='<level>',
          help='log level')
    @args('--module', dest='module', metavar='<module>',
          help='module')
    def setlevel(self, level='INFO', module='healthnmon'):
        """enables in setting the required log level to healthnmon logger."""

        result = rpc.call(context.get_admin_context(),
                          CONF.healthnmon_topic,
                          {"method": "setLogLevel",
                           "args": {"level": level,
                                    "module": module}})

CATEGORIES = [('db', DbCommands),
              ('ssh', SSHCommands),
              ('profile', ProfileCommands),
              ('log', LogCommands)]


def lazy_match(name, key_value_tuples):
    """Finds all objects that have a key that case insensitively contains
    [name] key_value_tuples is a list of tuples of the form (key, value)
    returns a list of tuples of the form (key, value)"""
    result = []
    for (k, v) in key_value_tuples:
        if k.lower().find(name.lower()) == 0:
            result.append((k, v))
    if len(result) == 0:
        print "%s does not match any options:" % name
        for k, _v in key_value_tuples:
            print "\t%s" % k
        sys.exit(2)
    if len(result) > 1:
        print "%s matched multiple options:" % name
        for k, _v in result:
            print "\t%s" % k
        sys.exit(2)
    return result


def methods_of(obj):
    """Get all callable methods of an object that don't start with underscore
    returns a list of tuples of the form (method_name, method)"""
    result = []
    for i in dir(obj):
        if callable(getattr(obj, i)) and not i.startswith('_'):
            result.append((i, getattr(obj, i)))
    return result


def main():
    """Parse options and call the appropriate class/method."""

    try:
        argv = config.parse_args(sys.argv)
        logging.healthnmon_manage_setup()
    except IOError, e:
        if e.errno == errno.EACCES:
            print _('Please re-run healthnmon-manage as root.')
            sys.exit(2)
        raise

    script_name = argv.pop(0)
    if len(argv) < 1:
        print _("\healthnmon version: %s (%s)\n") % \
            (version.version_string(), version.version_string_with_vcs())
        print script_name + " category action [<args>]"
        print _("Available categories:")
        for k, _v in CATEGORIES:
            print "\t%s" % k
        sys.exit(2)
    category = argv.pop(0)
    matches = lazy_match(category, CATEGORIES)
    # instantiate the command group object
    category, fn = matches[0]
    command_object = fn()
    actions = methods_of(command_object)
    if len(argv) < 1:
        if hasattr(command_object, '__call__'):
            action = ''
            fn = command_object.__call__
        else:
            print script_name + " category action [<args>]"
            print _("Available actions for %s category:") % category
            for k, _v in actions:
                print "\t%s" % k
            sys.exit(2)
    else:
        action = argv.pop(0)
        matches = lazy_match(action, actions)
        action, fn = matches[0]

    # For not decorated methods
    options = getattr(fn, 'options', [])

    usage = "%%prog %s %s <args> [options]" % (category, action)
    parser = optparse.OptionParser(usage=usage)
    for ar, kw in options:
        parser.add_option(*ar, **kw)
    (opts, fn_args) = parser.parse_args(argv)
    fn_kwargs = vars(opts)

    for k, v in fn_kwargs.items():
        if v is None:
            del fn_kwargs[k]

    # call the action with the remaining arguments
    try:
        fn(*fn_args, **fn_kwargs)
        if action == 'sync':
            print _("Database sync complete")
        rpc.cleanup()
        sys.exit(0)
    except TypeError:
        print _("Possible wrong number of arguments supplied")
        print fn.__doc__
        parser.print_help()
        raise
    except Exception:
        #print _("Command failed, please check log for more info")
        raise

if __name__ == '__main__':
    main()
